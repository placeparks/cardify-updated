/* app/(cardify)/upload/page.tsx */
"use client"

import { useState, useCallback, useEffect, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Navigation } from "@/components/navigation"
import { UploadArea } from "@/components/upload-area"
import { FlippableCardPreview } from "@/components/flippable-card-preview"
import { CustomCardCheckoutModal } from "@/components/custom-card-checkout-modal"
import { useNavigationVisibility } from "@/hooks/use-navigation-visibility"
import { Upload, AlertCircle, ArrowRight, Sparkles, Loader2, Package, CreditCard } from "lucide-react"
import { Checkbox } from "@/components/ui/checkbox"
import { cropImageToAspectRatio } from "@/lib/image-processing"
import { uploadUserImage } from "@/lib/supabase-storage";
import { getSupabaseBrowserClient, signInWithGoogle } from "@/lib/supabase-browser"
import { useToast } from "@/hooks/use-toast"
import { useNotifications, notificationHelpers } from "@/components/notification-system"
import { track } from "../../lib/analytics-client"
import Link from "next/link"
import { formatCreditsWithDollars } from "@/lib/utils"

// Package purchase response interface
interface PackagePurchaseResponse {
  success: boolean
  message: string
  package_id: string | null
  uploads_remaining: number
}

// Upload status interface for tiered system
interface UploadStatus {
  upload_count: number
  upload_package_count: number
  remaining_uploads: number
  next_package_cost: number
  message: string
}

export default function UploadPage() {
  /* ────────────────────────────── state ────────────────────────────── */
  const [uploadedImage, setUploadedImage] = useState<string | null>(null)
  const [processedImageBlob, setProcessedImageBlob] = useState<Blob | null>(null)
  const [uploadedImageUrl, setUploadedImageUrl] = useState<string | null>(null)

  const [isUploading, setIsUploading] = useState(false)
  const [isUploadingToDatabase, setIsUploadingToDatabase] = useState(false)
  const [uploadError, setUploadError] = useState<string | null>(null)

  const [uploadProgress, setUploadProgress] = useState(0)
  const [fileName, setFileName] = useState("")
  const [fileSize, setFileSize] = useState("")

  const [showCheckoutModal, setShowCheckoutModal] = useState(false)

  const [hasAgreed, setHasAgreed] = useState(false)
  const [showLegalDetails, setShowLegalDetails] = useState(false)

  const [credits, setCredits] = useState<number>(0)
  const [user, setUser] = useState<any>(null)
  const [freeGenerationsUsed, setFreeGenerationsUsed] = useState(0);
  const [isLoadingCredits, setIsLoadingCredits] = useState(false);
  
  // New upload status state
  const [uploadStatus, setUploadStatus] = useState<UploadStatus | null>(null)
  const [isLoadingUploadStatus, setIsLoadingUploadStatus] = useState(false)
  const [isPurchasingPackage, setIsPurchasingPackage] = useState(false)

  const isGuest        = !user
  const isOutOfCredits = !!user && credits < 1
  const cannotUpload   = !!user && uploadStatus && uploadStatus.remaining_uploads === 0

  /* ────────────────────── misc refs & helpers ──────────────────────── */
  const isNavVisible = useNavigationVisibility()
  const desktopButtonRef = useRef<HTMLDivElement>(null)
  const tooltipTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  const [mousePos, setMousePos] = useState({ x: 0, y: 0 })
  const [showTooltip, setShowTooltip] = useState(false)
  const [tooltipVisible, setTooltipVisible] = useState(false)
  const [tooltipText, setTooltipText] = useState("")
  const { toast } = useToast()
  const { showNotification, showLoading, hideLoading } = useNotifications()

  /* ──────────────────────── supabase session & RT ───────────────────── */
  useEffect(() => {
    const sb = getSupabaseBrowserClient()

    const init = async () => {
      const { data: { user } } = await sb.auth.getUser()
      setUser(user)
      if (!user?.id) return

      // Fetch credits and free generations
      const { data } = await sb
        .from("profiles") // Updated table name
        .select("credits, free_generations_used")
        .eq("id", user.id)
        .maybeSingle()

      setCredits(Number(data?.credits ?? 0))
      setFreeGenerationsUsed(Number(data?.free_generations_used ?? 0))
      
      // Fetch upload status
      await fetchUploadStatus(user.id)
    }
    init()

    let sub: ReturnType<typeof sb.channel> | null = null
    const listen = async () => {
      const { data: { user } } = await sb.auth.getUser()
      if (!user?.id) return

      sub = sb.channel(`profile-${user.id}`)
        .on(
          "postgres_changes",
          { event: "UPDATE", schema: "public", table: "profiles", filter: `id=eq.${user.id}` }, // Updated table name
          (payload) => {
            if (payload.new) {
              const newData = payload.new as { credits?: number; free_generations_used?: number }
              setCredits(Number(newData.credits ?? 0))
              setFreeGenerationsUsed(Number(newData.free_generations_used ?? 0))
              
              // Refresh upload status when profile changes
              fetchUploadStatus(user.id)
            }
          }
        )
        .subscribe()
    }
    listen()

    return () => { if (sub) sb.removeChannel(sub) }
  }, [])

  // Function to fetch upload status
  const fetchUploadStatus = async (userId: string) => {
    setIsLoadingUploadStatus(true)
    try {
      const sb = getSupabaseBrowserClient()
      
      // Try to call the new function first
      const { data, error } = await sb.rpc('get_user_upload_status', { p_user_id: userId })
      
      // Debug logging
      console.log('Upload status response:', { data, error, dataType: typeof data, isArray: Array.isArray(data) })
      
      if (error) {
        // Handle specific error codes
        if (error.code === '42702') {
          console.log('Column ambiguity error - database function needs fixing')
          // Create fallback status based on current profile data
          const fallbackStatus: UploadStatus = {
            upload_count: 0,
            upload_package_count: 1, // Assume user has package since they have credits
            remaining_uploads: 25, // First package gives 25 uploads
            next_package_cost: 100, // Next package costs 100 credits
            message: 'Database function needs update. Using fallback status.'
          }
          setUploadStatus(fallbackStatus)
          return
        }
        
        if (error.code === '42703' || error.message?.includes('column') || error.message?.includes('does not exist')) {
          console.log('Database functions not ready yet, using fallback upload status')
          
          // Create temporary fallback status based on current profile data
          const fallbackStatus: UploadStatus = {
            upload_count: 0,
            upload_package_count: 0,
            remaining_uploads: 0, // No uploads available until function is working
            next_package_cost: 1,
            message: 'Database functions not ready. Please contact support.'
          }
          
          setUploadStatus(fallbackStatus)
          return
        }
        
        console.error('Error fetching upload status:', error)
        
        // Generic fallback for other errors
        const fallbackStatus: UploadStatus = {
          upload_count: 0,
          upload_package_count: 1, // Assume user has package since they have credits
          remaining_uploads: 25, // First package gives 25 uploads
          next_package_cost: 100, // Next package costs 100 credits
          message: 'Error loading status. Using fallback status.'
        }
        setUploadStatus(fallbackStatus)
      } else if (data && Array.isArray(data) && data.length > 0) {
        setUploadStatus(data[0] as UploadStatus)
      } else if (data && typeof data === 'object' && 'upload_count' in data) {
        // Handle case where data is returned as single object instead of array
        setUploadStatus(data as UploadStatus)
      } else {
        // No data returned, use fallback
        const fallbackStatus: UploadStatus = {
          upload_count: 0,
          upload_package_count: 1, // Assume user has package since they have credits
          remaining_uploads: 25, // First package gives 25 uploads
          next_package_cost: 100, // Next package costs 100 credits
          message: 'No data returned. Using fallback status.'
        }
        setUploadStatus(fallbackStatus)
      }
    } catch (error) {
      console.error('Failed to fetch upload status:', error)
      
      // Fallback on any error
      const fallbackStatus: UploadStatus = {
        upload_count: 0,
        upload_package_count: 1, // Assume user has package since they have credits
        remaining_uploads: 25, // First package gives 25 uploads
        next_package_cost: 100, // Next package costs 100 credits
        message: 'Database error. Using fallback status.'
      }
      
      setUploadStatus(fallbackStatus)
    } finally {
      setIsLoadingUploadStatus(false)
    }
  }


// Function to purchase upload package
const purchaseUploadPackage = async () => {
  if (!user?.id) return
  
  // Check if user has enough credits for the package
  const requiredCredits = uploadStatus?.next_package_cost || 1
  if (credits < requiredCredits) {
    // Redirect to credits page if they don't have enough
    toast({
      title: "Insufficient Credits",
      description: `You need ${requiredCredits} credit${requiredCredits !== 1 ? 's' : ''} to purchase this package. Redirecting to credits page...`,
      variant: "destructive",
    })
    
    // Redirect after a short delay to show the toast
    setTimeout(() => {
      window.location.href = '/credits'
    }, 2000)
    return
  }
  
  setIsPurchasingPackage(true)
  const loadingId = showLoading(notificationHelpers.purchasing())
  
  try {
    const response = await fetch('/api/purchase-upload-package', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    })
    
    const result = await response.json()
    
    if (result.success) {
      hideLoading(loadingId)
      showNotification({
        type: 'success',
        title: 'Package Purchased! 🎉',
        description: result.message,
        action: {
          label: 'View Status',
          onClick: () => window.location.reload()
        }
      })
      
      // Refresh credits and upload status
      const sb = getSupabaseBrowserClient()
      const { data: profileData } = await sb
        .from("profiles")
        .select("credits")
        .eq("id", user.id)
        .maybeSingle()
      
      setCredits(Number(profileData?.credits ?? 0))
      await fetchUploadStatus(user.id)
    } else {
      hideLoading(loadingId)
      showNotification({
        type: 'error',
        title: 'Purchase Failed',
        description: result.message || "Failed to purchase package",
        action: {
          label: 'Try Again',
          onClick: () => purchaseUploadPackage()
        }
      })
    }
  } catch (error) {
    console.error('Failed to purchase package:', error)
    hideLoading(loadingId)
    showNotification({
      type: 'error',
      title: 'Purchase Failed',
      description: "An error occurred while purchasing the package",
      action: {
        label: 'Try Again',
        onClick: () => purchaseUploadPackage()
      }
    })
  } finally {
    setIsPurchasingPackage(false)
  }
}

// ... existing code ...
  /* ───────────────────────── UI helpers ─────────────────────────────── */
  const getTooltipMessage = () => {
    if (isGuest)              return "Sign in to continue"
    if (cannotUpload)          return "Upload limit reached - purchase package"
    if (isOutOfCredits)        return "Need 10 credits to upload"
    if (!uploadedImage)        return "Please upload an image first"
    if (!hasAgreed)            return "☝ Agree to terms above"
    return ""
  }

  /* ───────────────────────── upload handler ─────────────────────────── */
const handleFileUpload = useCallback(async (file: File) => {
  const t0 = performance.now()
  await track("upload", {
    action: "select_file",
    name: file.name,
    size: file.size,
    type: file.type,
  })

  // For authenticated users, check upload status
  if (user?.id) {
    setIsLoadingCredits(true)
    try {
      const sb = getSupabaseBrowserClient()
      
      // Check upload status first
      await fetchUploadStatus(user.id)
      
      // Check if user can upload
      if (uploadStatus && uploadStatus.remaining_uploads === 0) {
        setUploadError("Upload limit reached. Purchase a package to continue uploading.")
        toast({
          title: "Upload Limit Reached",
          description: uploadStatus.next_package_cost === 1 
            ? "You're a first time user! Get 25 uploads for 1 credit."
            : "You've used all your uploads. Purchase a package for 100 credits ($0.25) to get 10 more uploads.",
          variant: "destructive",
        })
        return
      }
      
      // Check credits for upload - now handled by the tiered system
      // The database functions will check if user has enough credits for their tier
    } catch (error) {
      console.error("Failed to check upload status:", error)
      // Continue with upload if we can't check
    } finally {
      setIsLoadingCredits(false)
    }
  }

  setIsUploading(true)
  setFileName(file.name)
  setFileSize((file.size / (1024 * 1024)).toFixed(2) + " MB")
  setUploadProgress(0)
  setUploadError(null)
  
  // Show loading notification (disabled - using existing UI loader instead)
  // const loadingId = showLoading(notificationHelpers.uploading(file.name))

  // Clear previous states
  setUploadedImageUrl(null)

  // Temporary preview while we process/upload
  const tempPreviewURL = URL.createObjectURL(file)
  setUploadedImage(tempPreviewURL)

  const prog = setInterval(() => setUploadProgress(p => (p >= 70 ? 70 : p + 10)), 200)

  try {
    // 1) Process to card aspect
    let processedBlob: Blob = file
    try {
      processedBlob = await cropImageToAspectRatio(file)
      setProcessedImageBlob(processedBlob)
      await track("upload", { phase: "cropped" })
    } catch (cropErr: any) {
      // Fallback to raw file, but record the failure of cropping
      setProcessedImageBlob(file)
      await track(
        "upload",
        { phase: "crop_failed_fallback_raw", msg: String(cropErr?.message || cropErr) },
        "error"
      )
    }

    clearInterval(prog)
    setUploadProgress(80)

    // 2) Guests: preview only (no upload/billing)
    if (isGuest) {
      setUploadProgress(100)
      await track("upload", { phase: "guest_preview_only" }, "ok", performance.now() - t0)
      // hideLoading(loadingId) // Disabled - no popup
      setTimeout(() => setIsUploading(false), 400)
      return
    }

    // 3) Authenticated: upload and let the DB trigger bill a paid credit.
    //    IMPORTANT: Do NOT mark as AI generation here (uploads don't get free gens).
    try {
      const result = await uploadUserImage(
        processedBlob,
        undefined,
        {
          /* 👇 NEW: make the row unambiguously an *upload* */
          metadata: {
            is_ai_generation: false,
            source_type:      "uploaded_image",   // <── added
          },
        },
      );

      // Check if upload was blocked due to duplicate
      console.log('🔍 Upload result:', result);
      console.log('🔍 Duplicate check result:', result.duplicateCheckResult);
      if (!result.success) {
        if (result.error === 'duplicate_image') {
          const errorMsg = result.message || 'This image appears to be a duplicate.';
          console.log('🚨 Duplicate detected:', errorMsg);
          setUploadError(errorMsg);
          toast({
            title: "Duplicate Image Detected",
            description: errorMsg,
            variant: "destructive",
          });
        } else {
          const errorMsg = result.message || 'Upload failed. Please try again.';
          console.log('🚨 Upload failed:', errorMsg);
          setUploadError(errorMsg);
          toast({
            title: "Upload Failed",
            description: errorMsg,
            variant: "destructive",
          });
        }
        setUploadProgress(100);
        // hideLoading(loadingId) // Disabled - no popup
        return;
      }
      
      // Check if upload was flagged for review (first duplicate)
      // TODO: Check the actual structure of duplicateCheckResult from console logs
      if (result.success && result.duplicateCheckResult && (result.duplicateCheckResult as any).flagged_for_review) {
        const warningMsg = result.message || 'Similar image detected - this will be reviewed by our team.';
        console.log('⚠️ Upload flagged for review:', warningMsg);
        setUploadError(warningMsg);
        toast({
          title: "Image Flagged for Review",
          description: warningMsg,
          variant: "destructive",
        });
      }

      const { publicUrl } = result;

      setUploadedImageUrl(publicUrl || null)
      setUploadedImage(publicUrl || null)
      URL.revokeObjectURL(tempPreviewURL)
      setUploadProgress(100)

      await track(
        "upload",
        { phase: "saved_to_supabase", hasUrl: !!publicUrl },
        "ok",
        performance.now() - t0
      )

      // Hide loading notification (disabled - no popup)

      // Soft refresh credits and upload status in case Realtime lags
      try {
        const sb = getSupabaseBrowserClient()
        if (user?.id) {
          const { data } = await sb
            .from("profiles") // Updated table name
            .select("credits")
            .eq("id", user.id)
            .maybeSingle()
          if (data) setCredits(Number(data.credits ?? 0))
          
          // Refresh upload status
          await fetchUploadStatus(user.id)
        }
      } catch {
        /* non-fatal */
      }
    } catch (uploadErr: any) {
      console.error("🚨 Upload to Supabase failed:", uploadErr)
      console.error("🚨 Error type:", typeof uploadErr)
      console.error("🚨 Error message:", uploadErr?.message)
      console.error("🚨 Error stack:", uploadErr?.stack)
      const msg = String(uploadErr?.message || uploadErr)

      await track(
        "upload",
        { phase: "upload_error", msg },
        "error",
        performance.now() - t0
      )

      // Hide loading notification (disabled - no popup)
      
      if (msg.includes("insufficient_credits") || msg.includes("insufficient_credits_or_free_gens")) {
        setUploadError("Insufficient credits. You need 10 credits to upload an image.")
        showNotification(notificationHelpers.uploadInsufficientCredits())
      } else if (msg === "not_signed_in") {
        setUploadError("Please sign in to upload images.")
        showNotification({
          type: 'error',
          title: 'Sign In Required',
          description: 'You must be signed in to upload images.',
          action: {
            label: 'Sign In',
            onClick: () => signInWithGoogle()
          }
        })
      } else {
        setUploadError("Failed to upload image. Please try again.")
        showNotification(notificationHelpers.uploadError(msg))
      }
      setUploadProgress(100)
    }
  } catch (error: any) {
    console.error("Image processing failed:", error)
    clearInterval(prog)
    await track(
      "upload",
      { phase: "processing_exception", msg: String(error?.message || error) },
      "error",
      performance.now() - t0
    )
    setUploadError("Failed to process image. Please try again.")
    setUploadProgress(100)
  } finally {
    clearInterval(prog)
    setTimeout(() => setIsUploading(false), 400)
  }
}, [isGuest, user?.id, credits, uploadStatus, cannotUpload])



  /* ───────────────────── finalize / buy / sign-in ───────────────────── */
// ensure you have: import { track } from "@/lib/analytics-client"

const finishOrRedirect = async (): Promise<void> => {
  const t0 = performance.now();

  // block if required state missing
  if (!uploadedImage || !hasAgreed) {
    await track("upload", {
      phase: "finalize_block",
      reason: !uploadedImage ? "no_image" : "not_agreed",
      level: "warn", // label it in props, not in the status slot
    });
    return;
  }

  // auth gate
  if (isGuest) {
    await track("upload", { phase: "finalize_gate_guest" });
    toast({ title: "Sign in required" });
    signInWithGoogle("/upload");
    return;
  }

  // credits gate
  if (isOutOfCredits) {
    await track("upload", { phase: "finalize_gate_no_credits" });
    toast({ title: "No credits", description: "Buy credits to continue." });
    window.location.href = "/credits";
    return;
  }

  // already uploaded? open checkout
  if (uploadedImageUrl) {
    await track("upload", {
      phase: "open_checkout",
      from: "existing_url",
      duration_ms: performance.now() - t0,
    });
    await track("buy", { event: "open_checkout", source: "upload_finalize_existing" });
    setShowCheckoutModal(true);
    return;
  }

  // upload now, then open checkout
  setIsUploadingToDatabase(true);
  setUploadError(null);

  try {
    // Make the blob definitively a Blob (not null)
    const blob: Blob = processedImageBlob
      ? processedImageBlob
      : await fetch(uploadedImage as string).then((r) => r.blob());

    const result = await uploadUserImage(
      blob,
      undefined,
      {
        /* 👇 SAME one-liner here */
        metadata: {
          is_ai_generation: false,
          source_type:      "uploaded_image",   // <── added
        },
      },
    );

    // Check if upload was blocked due to duplicate
    console.log('🔍 Finalize upload result:', result);
    console.log('🔍 Finalize duplicate check result:', result.duplicateCheckResult);
    if (!result.success) {
      if (result.error === 'duplicate_image') {
        setUploadError(result.message || 'This image appears to be a duplicate.');
        toast({
          title: "Duplicate Image Detected",
          description: result.message || 'This image appears to be a duplicate.',
          variant: "destructive",
        });
      } else {
        setUploadError(result.message || 'Upload failed. Please try again.');
        toast({
          title: "Upload Failed",
          description: result.message || 'Upload failed. Please try again.',
          variant: "destructive",
        });
      }
      return;
    }
    
    // Check if upload was flagged for review (first duplicate)
    // TODO: Check the actual structure of duplicateCheckResult from console logs
    if (result.success && result.duplicateCheckResult && (result.duplicateCheckResult as any).flagged_for_review) {
      const warningMsg = result.message || 'Similar image detected - this will be reviewed by our team.';
      console.log('⚠️ Finalize upload flagged for review:', warningMsg);
      setUploadError(warningMsg);
      toast({
        title: "Image Flagged for Review",
        description: warningMsg,
        variant: "destructive",
      });
    }

    const { publicUrl } = result;

    await track("upload", {
      phase: "uploading_from_finalize",
      size: blob.size,
      type: blob.type,
    });

    setUploadedImageUrl(publicUrl || null);
    setUploadedImage(publicUrl || null);
    setShowCheckoutModal(true);

    await track("upload", {
      phase: "uploaded_from_finalize",
      hasUrl: !!publicUrl,
      duration_ms: performance.now() - t0,
    });
    await track("buy", { event: "open_checkout", source: "upload_finalize_uploaded" });
  } catch (err: any) {
    console.error("🚨 Finalize upload error:", err);
    console.error("🚨 Error type:", typeof err);
    console.error("🚨 Error message:", err?.message);
    console.error("🚨 Error stack:", err?.stack);
    const msg = String(err?.message || err);
    await track("upload", { phase: "finalize_upload_error", msg }, "error");

    if (err?.message === "no_credits") {
      setUploadError("Insufficient credits. You need 10 credits to upload an image.");
    } else if (err?.message?.startsWith("duplicate_image:")) {
      setUploadError("This image has already been uploaded. Duplicate images are not allowed.");
      toast({
        title: "Duplicate Image",
        description: "This image has already been uploaded. Please use a different image.",
        variant: "destructive",
      });
    } else {
      setUploadError("Failed to upload image. Try again.");
    }
  } finally {
    setIsUploadingToDatabase(false);
  }
};


  /* ─────────────────────────── tooltips ─────────────────────────────── */
  const handleMouseMove = useCallback((e: MouseEvent) => {
    setMousePos({ x: e.clientX, y: e.clientY })
  }, [])

  const handleMouseEnter = useCallback(() => {
    const message = getTooltipMessage()
    if (!message || isUploadingToDatabase) return
    
    // Clear any existing timeout
    if (tooltipTimeoutRef.current) {
      clearTimeout(tooltipTimeoutRef.current)
    }
    
    setTooltipText(message)
    setShowTooltip(true)
    // Small delay for smooth fade in
    setTimeout(() => {
      setTooltipVisible(true)
    }, 10)
    
    document.addEventListener('mousemove', handleMouseMove)
  }, [uploadedImage, hasAgreed, isGuest, isOutOfCredits, isUploadingToDatabase, handleMouseMove])

  const handleMouseLeave = useCallback(() => {
    // Start fade out
    setTooltipVisible(false)
    
    // Remove tooltip after fade animation completes
    tooltipTimeoutRef.current = setTimeout(() => {
      setShowTooltip(false)
      setTooltipText("")
    }, 150) // Match the transition duration
    
    document.removeEventListener('mousemove', handleMouseMove)
  }, [handleMouseMove])
  
  // Clean up tooltip on unmount
  useEffect(() => {
    return () => {
      if (tooltipTimeoutRef.current) {
        clearTimeout(tooltipTimeoutRef.current)
      }
      document.removeEventListener("mousemove", handleMouseMove)
    }
  }, [handleMouseMove])
  
  // Clean up blob URLs to prevent memory leaks
  useEffect(() => {
    return () => {
      // Clean up blob URL when component unmounts
      if (uploadedImage && uploadedImage.startsWith('blob:')) {
        URL.revokeObjectURL(uploadedImage)
      }
    }
  }, [uploadedImage])

  /* ───────────────────────── action button ──────────────────────────── */
  const ActionButton = () => (
    <Button
      disabled={!uploadedImage || !hasAgreed || isUploadingToDatabase || Boolean(cannotUpload)}
      onClick={finishOrRedirect}
      className={`w-full text-lg py-6 tracking-wider transition-all duration-300 ${
        uploadedImage && hasAgreed && !cannotUpload
          ? "cyber-button"
          : "bg-gray-800 border-2 border-gray-600 text-gray-500 cursor-not-allowed opacity-50"
      }`}
    >
      {isUploadingToDatabase ? (
        <>
          <Loader2 className="w-5 h-5 mr-2 animate-spin" /> Uploading…
        </>
      ) : isGuest ? (
        <>Sign In</>
      ) : cannotUpload ? (
        <>Purchase Package</>
      ) : isOutOfCredits ? (
        <>Need 10 Credits</>
      ) : (
        <>
          Finalize <ArrowRight className="w-5 h-5 ml-2" />
        </>
      )}
    </Button>
  )


  /* ─────────────────────────────── JSX ──────────────────────────────── */
  return (
    <div className="min-h-screen bg-cyber-black relative overflow-hidden font-mono">
      <div className="fixed inset-0 cyber-grid opacity-10 pointer-events-none" />
      <div className="fixed inset-0 scanlines opacity-20 pointer-events-none" />

      <Navigation />

      <CustomCardCheckoutModal
        isOpen={showCheckoutModal}
        onClose={() => setShowCheckoutModal(false)}
        uploadedImage={uploadedImage}
        processedImageBlob={processedImageBlob}
        uploadedImageUrl={uploadedImageUrl}
      />

      <div className="px-6 py-8 pt-24">
        <div className="max-w-7xl mx-auto">
          {/* heading */}
          <div className="mb-8">
            <h1 className="text-2xl sm:text-3xl font-bold text-white tracking-wider">
              Upload Your Own Artwork
            </h1>
            <p className="text-gray-400">Create custom trading cards with your own designs</p>
          </div>

          <div className="grid lg:grid-cols-5 gap-8">
            {/* left column */}
            <div className="lg:col-span-3 flex flex-col gap-3">
              {/* upload card */}
<Card className="bg-cyber-dark/60 backdrop-blur-sm border border-cyber-cyan/30 flex-1 flex flex-col">
  <CardHeader className="pb-3">
    <CardTitle className="text-white flex items-center gap-2 tracking-wider text-lg">
      <Upload className="w-5 h-5 text-cyber-cyan" /> Upload Artwork
    </CardTitle>
    <p className="text-xs text-gray-400 mt-1.5 ml-7">
      Need artwork? Try Canva or Photoshop (1200×1680 px+) or our{" "}
      <a
        href="/generate"
        className="text-cyber-cyan underline hover:text-cyber-pink transition-colors"
      >
        AI Generator
      </a>
      .
    </p>

    {/* Credit notice (always shown) */}
    <div className="mt-2 ml-7 flex items-start gap-2 text-[11px] bg-cyber-orange/10 border border-cyber-orange/40 rounded px-2 py-1.5">
      <AlertCircle className="w-3.5 h-3.5 text-cyber-orange mt-0.5" />
      <span className="text-gray-300">
        {user ? (
          <>
            Each upload costs <span className="font-semibold text-cyber-orange">10 credits ($0.03)</span>
            <span className="ml-1 text-cyber-cyan">
              (You have {credits} credit{credits !== 1 ? 's' : ''})
            </span>
            <br />
            <span className="text-cyber-cyan text-[10px]">
              {uploadStatus ? (
                uploadStatus.upload_count < 25 && uploadStatus.upload_package_count === 0
                  ? '• 25 initial uploads available • After that: 100 credits ($0.25) for 10 uploads'
                  : '• 100 credits ($0.25) for 10 uploads'
              ) : (
                '• Loading upload status...'
              )}
            </span>
          </>
        ) : (
          <>
            Each upload costs <span className="font-semibold text-cyber-orange">10 credits ($0.03)</span>
            <br />
            <span className="text-cyber-cyan text-[10px]">
              {uploadStatus ? (
                uploadStatus.upload_count < 25 && uploadStatus.upload_package_count === 0
                  ? '• 25 initial uploads available • After that: 100 credits ($0.25) for 10 uploads'
                  : '• 100 credits ($0.25) for 10 uploads'
              ) : (
                '• Loading upload status...'
              )}
            </span>
          </>
        )}
      </span>
    </div>

    {/* Upload Usage Display */}
    {user && uploadStatus && (
      <div className="mt-3 ml-7 space-y-2">
        {/* Upload Count */}
        <div className="flex items-center justify-between text-[11px] bg-cyber-cyan/10 border border-cyber-cyan/40 rounded px-2 py-1.5">
          <span className="text-gray-300 flex items-center gap-1">
            <Upload className="w-3 h-3 text-cyber-cyan" />
            Total Uploads
          </span>
          <span className="text-cyber-cyan font-mono">
            {uploadStatus.upload_count}
          </span>
        </div>

        {/* Package Status */}
        {uploadStatus.remaining_uploads > 0 && (
          <div className="flex items-center justify-between text-[11px] bg-cyber-green/10 border border-cyber-green/40 rounded px-2 py-1.5">
            <span className="text-gray-300 flex items-center gap-1">
              <Package className="w-3 h-3 text-cyber-green" />
              Remaining Uploads
            </span>
            <span className="text-cyber-green font-mono">
              {uploadStatus.remaining_uploads}
            </span>
          </div>
        )}

        {/* Purchase Package Button - Temporarily Hidden */}
        {uploadStatus.remaining_uploads === 0 && (
          <div className="flex items-center justify-between text-[11px] bg-cyber-pink/10 border border-cyber-pink/40 rounded px-2 py-1.5">
            <span className="text-gray-300 flex items-center gap-1">
              <CreditCard className="w-3 h-3 text-cyber-pink" />
              Upload limit reached
            </span>
            <span className="text-cyber-pink text-[10px]">
              {uploadStatus.next_package_cost === 1 ? `${formatCreditsWithDollars(1)} for 25 uploads` : `${formatCreditsWithDollars(100)} for 10 uploads`}
            </span>
          </div>
        )}
      </div>
    )}
  </CardHeader>

  <CardContent className="flex-1 flex flex-col pt-3">
    {uploadError && (
      <div className="mb-4 p-3 bg-red-900/30 border border-red-500/50 rounded-lg">
        <div className="flex items-center gap-2 text-red-400">
          <AlertCircle className="w-4 h-4 flex-shrink-0" />
          <span className="text-sm font-medium">{uploadError}</span>
        </div>
      </div>
    )}
    <UploadArea
      onFileUpload={handleFileUpload}
      disabled={isUploading || isLoadingCredits}
      isUploading={isUploading || isLoadingCredits}
      uploadProgress={uploadProgress}
      fileName={fileName}
      fileSize={fileSize}
      uploadedImage={uploadedImage}
    />
  </CardContent>
</Card>


              {/* mobile preview */}
              <div className="lg:hidden">
                <Card className="bg-cyber-dark/60 backdrop-blur-sm border border-cyber-cyan/30">
                  <CardHeader>
                    <CardTitle className="text-white tracking-wider">Card Preview</CardTitle>
                    <p className="text-gray-400 text-sm">Hover to see the back of your card</p>
                  </CardHeader>
                  <CardContent>
                    <FlippableCardPreview 
                      artwork={uploadedImageUrl || (isUploading ? null : uploadedImage)} 
                      defaultImage="/example-card_cardify.webp"
                      isLoading={isUploading || (!!uploadedImage && !uploadedImageUrl && !isGuest)}
                       useSimpleLoader={true}
                    />
                  </CardContent>
                </Card>
              </div>

              {/* desktop action */}
              <Card className="bg-cyber-dark/60 backdrop-blur-sm border border-cyber-green/30 hidden lg:block">
                <CardContent className="p-4">
                  <div className="space-y-3">
                    {/* legal checkbox */}
                    <label className="flex items-start gap-2 cursor-pointer">
                      <Checkbox
                        checked={hasAgreed}
                        onCheckedChange={v => setHasAgreed(v === true || v === "indeterminate")}
                        className="h-4 w-4 mt-0.5 border-2 border-cyber-cyan data-[state=checked]:bg-cyber-cyan data-[state=checked]:border-cyber-cyan data-[state=checked]:text-cyber-black"
                      />
                      <span className="text-xs text-gray-300 leading-relaxed">
                        I confirm I have rights to use this content and agree to the{" "}
                        <a href="/terms" target="_blank" className="text-cyber-cyan underline">
                          Terms
                        </a>{" "}
                        and{" "}
                        <a href="/dmca" target="_blank" className="text-cyber-cyan underline">
                          DMCA Policy
                        </a>
                        .{" "}
                        <button
                          type="button"
                          onClick={e => {
                            e.preventDefault()
                            e.stopPropagation()
                            setShowLegalDetails(prev => !prev)
                          }}
                          className="text-gray-400 ml-0.5 text-[11px] border border-gray-600 px-1.5 py-0.5 rounded"
                        >
                          {showLegalDetails ? "− less" : "+ more"}
                        </button>
                      </span>
                    </label>
                    {showLegalDetails && (
                      <div className="text-xs text-gray-400 bg-cyber-dark/50 p-2 rounded border border-cyber-cyan/10">
                        <p className="flex items-start gap-1 mb-1">
                          <span className="text-cyber-yellow">•</span> You own or have licenses to use
                          all content
                        </p>
                        <p className="flex items-start gap-1 mb-1">
                          <span className="text-cyber-yellow">•</span> Content doesn’t infringe IP
                        </p>
                        <p className="flex items-start gap-1">
                          <span className="text-cyber-yellow">•</span> No unauthorized likenesses
                        </p>
                      </div>
                    )}

                    {/* button */}
                    <div 
                      ref={desktopButtonRef} 
                      className="pt-1"
                      onMouseEnter={handleMouseEnter}
                      onMouseLeave={handleMouseLeave}
                    >
                      <ActionButton />
                    </div>

                    {uploadError && (
                      <div className="text-xs text-red-400 bg-red-900/20 border border-red-400/30 rounded p-2 mt-2">
                        <AlertCircle className="w-3 h-3 inline mr-1" /> {uploadError}
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* right column preview */}
            <div className="hidden lg:block lg:col-span-2">
              <div
                className={`sticky transition-all duration-300 ${
                  isNavVisible ? "top-24" : "top-4"
                }`}
              >
                {/* Upload Usage Card */}
                {user && (
                  <Card className="bg-cyber-dark/60 backdrop-blur-sm border border-cyber-cyan/30 mb-4">
                    <CardHeader className="pb-3">
                      <CardTitle className="text-white tracking-wider text-lg">Upload Status</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      {isLoadingUploadStatus ? (
                        <div className="flex items-center justify-center py-4">
                          <Loader2 className="w-5 h-5 animate-spin text-cyber-cyan" />
                          <span className="ml-2 text-gray-400 text-sm">Loading...</span>
                        </div>
                      ) : uploadStatus ? (
                        <>
                          {/* Upload Count */}
                          <div className="flex items-center justify-between p-2 bg-cyber-cyan/10 border border-cyber-cyan/30 rounded">
                            <span className="text-gray-300 text-sm flex items-center gap-2">
                              <Upload className="w-4 h-4 text-cyber-cyan" />
                              Total Uploads
                            </span>
                            <span className="text-cyber-cyan font-mono font-semibold">
                              {uploadStatus.upload_count}
                            </span>
                          </div>

                          {/* Package Info */}
                          <div className="flex items-center justify-between p-2 bg-cyber-green/10 border border-cyber-green/30 rounded">
                            <span className="text-gray-300 text-sm flex items-center gap-2">
                              <Package className="w-4 h-4 text-cyber-green" />
                              Packages Purchased
                            </span>
                            <span className="text-cyber-green font-mono font-semibold">
                              {uploadStatus.upload_package_count}
                            </span>
                          </div>

                          {/* Remaining Uploads */}
                          <div className="flex items-center justify-between p-2 bg-cyber-orange/10 border border-cyber-orange/30 rounded">
                            <span className="text-gray-300 text-sm">Remaining Uploads</span>
                            <span className="text-cyber-orange font-mono font-semibold">
                              {uploadStatus.remaining_uploads}
                            </span>
                          </div>

                          {/* Status Message */}
                          <div className="p-2 bg-gray-800/50 border border-gray-600 rounded">
                            <p className="text-cyber-cyan text-xs text-center">
                              {uploadStatus.message}
                            </p>
                          </div>

                          {/* Purchase Package Button */}
                          {uploadStatus.next_package_cost > 0 && (
                            <div className="space-y-3">
                              <div className="p-2 bg-cyber-pink/10 border border-cyber-pink/30 rounded">
                                <p className="text-cyber-pink text-xs text-center">
                                  {uploadStatus.next_package_cost === 1 ? 'First time user - get 25 uploads!' : 'Need more uploads!'}
                                </p>
                                <p className="text-cyber-pink text-xs text-center">
                                  {uploadStatus.next_package_cost === 1 ? `${formatCreditsWithDollars(1)} for 25 uploads` : `${formatCreditsWithDollars(uploadStatus.next_package_cost)} for 10 uploads`}
                                </p>
                              </div>
                              <Button
                                onClick={purchaseUploadPackage}
                                disabled={isPurchasingPackage}
                                className={`w-full ${
                                  credits < (uploadStatus?.next_package_cost || 1)
                                    ? 'bg-red-600 hover:bg-red-700 text-white border border-red-500/50'
                                    : 'cyber-button'
                                }`}
                              >
                                {isPurchasingPackage ? "Purchasing..." : 
                                  credits < (uploadStatus?.next_package_cost || 1)
                                    ? `Need ${uploadStatus?.next_package_cost || 1} Credit${(uploadStatus?.next_package_cost || 1) !== 1 ? 's' : ''} - Go to Credits Page`
                                    : `Purchase Package (${uploadStatus.next_package_cost} credit${uploadStatus.next_package_cost !== 1 ? 's' : ''} for ${uploadStatus.next_package_cost === 1 ? '25' : '10'} uploads)`
                                }
                              </Button>
                              <div className="text-center">
                                <Link href="/credits" className="text-cyber-cyan hover:text-cyber-cyan/80 text-xs underline">
                                  Need credits? Buy them here
                                </Link>
                              </div>
                            </div>
                          )}

                    
                        </>
                      ) : (
                        <div className="text-gray-400 text-sm text-center py-4">
                          Unable to load upload status
                        </div>
                      )}
                    </CardContent>
                  </Card>
                )}

                {/* Card Preview Card */}
                <Card className="bg-cyber-dark/60 backdrop-blur-sm border border-cyber-cyan/30">
                  <CardHeader>
                    <CardTitle className="text-white tracking-wider">Card Preview</CardTitle>
                    <p className="text-gray-400 text-sm">Hover to see the back of your card</p>
                  </CardHeader>
                  <CardContent>
                <FlippableCardPreview
artwork={uploadedImageUrl || (isUploading ? null : uploadedImage)}
  defaultImage="/example-card_cardify.webp"
  isLoading={isUploading || (!!uploadedImage && !uploadedImageUrl && !isGuest)}
  useSimpleLoader
/>

                  </CardContent>
                </Card>
              </div>
            </div>
          </div>

          {/* mobile action */}
          <Card className="bg-cyber-dark/60 backdrop-blur-sm border border-cyber-green/30 lg:hidden mt-8">
            <CardContent className="p-6 space-y-4">
              {uploadError && (
                <div className="p-3 bg-red-900/30 border border-red-500/50 rounded-lg">
                  <div className="flex items-center gap-2 text-red-400">
                    <AlertCircle className="w-4 h-4 flex-shrink-0" />
                    <span className="text-sm font-medium">{uploadError}</span>
                  </div>
                </div>
              )}
              {/* legal checkbox */}
              <label className="flex items-start gap-2 cursor-pointer">
                <Checkbox
                  checked={hasAgreed}
                  onCheckedChange={v => setHasAgreed(v === true || v === "indeterminate")}
                  className="h-4 w-4 mt-0.5 border-2 border-cyber-cyan data-[state=checked]:bg-cyber-cyan data-[state=checked]:border-cyber-cyan data-[state=checked]:text-cyber-black"
                />
                <span className="text-xs text-gray-300 leading-relaxed">
                  I confirm I have rights to use this content and agree to the{" "}
                  <a href="/terms" target="_blank" className="text-cyber-cyan underline">
                    Terms
                  </a>{" "}
                  and{" "}
                  <a href="/dmca" target="_blank" className="text-cyber-cyan underline">
                    DMCA Policy
                  </a>
                  .{" "}
                  <button
                    type="button"
                    onClick={e => {
                      e.preventDefault()
                      e.stopPropagation()
                                                  setShowLegalDetails(prev => !prev)
                    }}
                    className="text-gray-400 ml-0.5 text-[11px] border border-gray-600 px-1.5 py-0.5 rounded"
                  >
                    {showLegalDetails ? "− less" : "+ more"}
                  </button>
                </span>
              </label>
              {showLegalDetails && (
                <div className="text-xs text-gray-400 bg-cyber-dark/50 p-2 rounded border border-cyber-cyan/10">
                  <p className="flex items-start gap-1 mb-1">
                    <span className="text-cyber-yellow">•</span> You own or have licenses to use
                    all content
                  </p>
                  <p className="flex items-start gap-1 mb-1">
                    <span className="text-cyber-yellow">•</span> Content doesn't infringe IP
                  </p>
                  <p className="flex items-start gap-1">
                    <span className="text-cyber-yellow">•</span> No unauthorized likenesses
                  </p>
                </div>
              )}
              
              <div 
                onMouseEnter={handleMouseEnter}
                onMouseLeave={handleMouseLeave}
              >
                <ActionButton />
              </div>
              {uploadError && (
                <div className="text-xs text-red-400 bg-red-900/20 border border-red-400/30 rounded p-2">
                  <AlertCircle className="w-3 h-3 inline mr-1" /> {uploadError}
                </div>
              )}
            </CardContent>
          </Card>

          {/* Mobile Upload Status */}
          {user && (
            <Card className="bg-cyber-dark/60 backdrop-blur-sm border border-cyber-cyan/30 lg:hidden mt-4">
              <CardHeader className="pb-3">
                <CardTitle className="text-white tracking-wider text-lg">Upload Status</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {isLoadingUploadStatus ? (
                  <div className="flex items-center justify-center py-4">
                    <Loader2 className="w-5 h-5 animate-spin text-cyber-cyan" />
                    <span className="ml-2 text-gray-400 text-sm">Loading...</span>
                  </div>
                ) : uploadStatus ? (
                                    <>
                    {/* Upload Count */}
                    <div className="flex items-center justify-between p-2 bg-cyber-cyan/10 border border-cyber-cyan/30 rounded">
                      <span className="text-gray-300 text-sm flex items-center gap-2">
                        <Upload className="w-4 h-4 text-cyber-cyan" />
                        Total Uploads
                      </span>
                      <span className="text-cyber-cyan font-mono font-semibold">
                        {uploadStatus.upload_count}
                      </span>
                    </div>

                    {/* Package Info */}
                    <div className="flex items-center justify-between p-2 bg-cyber-green/10 border border-cyber-green/30 rounded">
                      <span className="text-gray-300 text-sm flex items-center gap-2">
                        <Package className="w-4 h-4 text-cyber-green" />
                        Packages Purchased
                      </span>
                      <span className="text-cyber-green font-mono font-semibold">
                        {uploadStatus.upload_package_count}
                      </span>
                    </div>

                    {/* Remaining Uploads */}
                    <div className="flex items-center justify-between p-2 bg-cyber-orange/10 border border-cyber-orange/30 rounded">
                      <span className="text-gray-300 text-sm">Remaining Uploads</span>
                      <span className="text-cyber-orange font-mono font-semibold">
                        {uploadStatus.remaining_uploads}
                      </span>
                    </div>

                    {/* Status Message */}
                    <div className="p-2 bg-gray-800/50 border border-gray-600 rounded">
                      <p className="text-cyber-cyan text-xs text-center">
                        {uploadStatus.message}
                      </p>
                    </div>

                    {/* Purchase Package Button */}
                    {uploadStatus.next_package_cost > 0 && (
                      <div className="space-y-3">
                        <div className="p-2 bg-cyber-pink/10 border border-cyber-pink/30 rounded">
                          <p className="text-cyber-pink text-xs mb-2 text-center">
                            {uploadStatus.next_package_cost === 1 ? 'First time user - get 25 uploads!' : 'Need more uploads!'}
                          </p>
                          <p className="text-cyber-pink text-xs text-center">
                            {uploadStatus.next_package_cost === 1 ? `${formatCreditsWithDollars(1)} for 25 uploads` : `${formatCreditsWithDollars(uploadStatus.next_package_cost)} for 10 uploads`}
                          </p>
                        </div>
                        <Button
                          onClick={purchaseUploadPackage}
                          disabled={isPurchasingPackage}
                          className={`w-full ${
                            credits < (uploadStatus?.next_package_cost || 1)
                              ? 'bg-red-600 hover:bg-red-700 text-white border border-red-500/50'
                              : 'cyber-button'
                          }`}
                        >
                          {isPurchasingPackage ? "Purchasing..." : 
                            credits < (uploadStatus?.next_package_cost || 1)
                              ? `Need ${uploadStatus?.next_package_cost || 1} Credit${(uploadStatus?.next_package_cost || 1) !== 1 ? 's' : ''} - Go to Credits Page`
                              : `Purchase Package (${uploadStatus.next_package_cost} credit${uploadStatus.next_package_cost !== 1 ? 's' : ''} for ${uploadStatus.next_package_cost === 1 ? '25' : '10'} uploads)`
                          }
                        </Button>
                        <div className="text-center">
                          <Link href="/credits" className="text-cyber-cyan hover:text-cyber-cyan/80 text-xs underline">
                            Need credits? Buy them here
                          </Link>
                        </div>
                      </div>
                    )}
                  </>
                ) : (
                  <div className="text-gray-400 text-sm text-center py-4">
                    Unable to load upload status
                  </div>
                )}
              </CardContent>
            </Card>
          )}
        </div>
      </div>

      <footer className="px-6 py-8 mt-16 border-t border-cyber-cyan/20 bg-cyber-dark/40">
        <div className="max-w-6xl mx-auto text-center">
          <p className="text-sm text-gray-400">
            © {new Date().getFullYear()} Cardify. All rights reserved.
          </p>
        </div>
      </footer>

      {/* tooltip */}
      {showTooltip && tooltipText && (
        <div
          className={`fixed z-50 pointer-events-none transition-opacity duration-150 ${
            tooltipVisible ? "opacity-100" : "opacity-0"
          }`}
          style={{ left: mousePos.x + 15, top: mousePos.y + 15 }}
        >
          <div className="bg-cyber-dark border border-cyber-cyan/50 text-white text-sm px-3 py-2 rounded-md shadow-lg max-w-xs">
            {tooltipText}
          </div>
        </div>
      )}
    </div>
  )
}