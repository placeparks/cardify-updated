"use client"

export const dynamic = "force-dynamic"

import { useEffect, useMemo, useState, useCallback, useRef } from "react"
import Image from "next/image"
import Link from "next/link"
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Skeleton } from "@/components/ui/skeleton"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
import { useToast } from "@/hooks/use-toast"
import { useOwnedCardify } from "@/hooks/useOwnedCardify"
import NFTCard from "@/components/NFTCard"
import { WalletButton } from "@/components/WalletConnect"
import AvatarUploader from "@/components/AvatarUploader"
import { Pencil, Check, X, Sparkles, Trash2, Loader2, AlertTriangle, ChevronDown, Upload } from "lucide-react"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Lightbox } from "@/components/ui/lightbox"

const FACTORY = process.env.NEXT_PUBLIC_FACTORY_ADDRESS as `0x${string}`

// Fallback image for broken thumbnails
const PLACEHOLDER =
  "data:image/svg+xml;utf8," +
  encodeURIComponent(
    `<svg xmlns="http://www.w3.org/2000/svg" width="800" height="600"><rect width="100%" height="100%" fill="#0b0f19"/><text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="#6ee7ff" font-family="monospace" font-size="18">No Preview</text></svg>`
  )

type AssetRow = {
  id: string
  owner_id: string
  title: string | null
  image_url: string | null
  storage_path: string | null
  mime_type: string | null
  size_bytes: number | null
  created_at: string | null
}

type UIAsset = {
  id: string
  owner_id: string
  file_path: string
  file_name: string
  file_size: number | null
  mime_type: string | null
  uploaded_at: string | null
  public_url: string
}

const toUI = (row: AssetRow): UIAsset => {
  const file_path = row.storage_path ?? row.title ?? ""
  const file_name = (row.title && row.title.trim()) || file_path.split("/").pop() || "file"
  return {
    id: row.id,
    owner_id: row.owner_id,
    file_path,
    file_name,
    file_size: row.size_bytes ?? null,
    mime_type: row.mime_type ?? null,
    uploaded_at: row.created_at ?? null,
    public_url: row.image_url ?? "",
  }
}

type ListingRow = {
  id: string
  source_id: string
  seller_id: string
  status: "listed" | "sold" | "inactive"
  is_active: boolean
  price_cents: number
}

export default function Profile() {
  const supabase = createClientComponentClient()
  const { toast } = useToast()

  const [onboarding, setOnboarding] = useState(false)
  const [uid, setUid] = useState<string | null>(null)
  const [loadingAuth, setLoadingAuth] = useState(true)

  const [assets, setAssets] = useState<UIAsset[]>([])
  const [loadingAssets, setLoadingAssets] = useState(true)
  const [loadError, setLoadError] = useState<string | null>(null)

  const [stripeVerified, setStripeVerified] = useState<boolean | null>(null)
  const [stripeAccount, setStripeAccount] = useState<string | null>(null)

  const [sellOpen, setSellOpen] = useState(false)
  const [selectedAsset, setSelectedAsset] = useState<UIAsset | null>(null)
  const FIXED_PRICE_USD = 9
  const [creating, setCreating] = useState(false)

  const [listingBySource, setListingBySource] = useState<Record<string, ListingRow | undefined>>({})
  const [canceling, setCanceling] = useState<string | null>(null)

  const PAGE_SIZE = 24
  const [offset, setOffset] = useState(0)
  const [hasMore, setHasMore] = useState(true)
  const [loadingMore, setLoadingMore] = useState(false)

  const canSell = Boolean(stripeAccount && stripeVerified)
  const totalMb = useMemo(
    () => assets.reduce((s, a) => s + (a.file_size ?? 0) / (1024 * 1024), 0),
    [assets]
  )

  // Avatar
  const [avatarUrl, setAvatarUrl] = useState<string | null>(null)

  // Profile Name
  const [displayName, setDisplayName] = useState<string>("")
  const [nameLoading, setNameLoading] = useState<boolean>(true)
  const [nameSaving, setNameSaving] = useState<boolean>(false)
  const [isEditingName, setIsEditingName] = useState<boolean>(false)
  const [draftName, setDraftName] = useState<string>("")


  // Image-rename state
  const [renameId, setRenameId] = useState<string | null>(null)
  const [renamingId, setRenamingId] = useState<string | null>(null) 
  const [draftTitle, setDraftTitle] = useState<string>('')

  // Lightbox state
  const [lightboxOpen, setLightboxOpen] = useState(false)
  const [lightboxIndex, setLightboxIndex] = useState(0)

  // Dropdown state
  const [isCreateDropdownOpen, setIsCreateDropdownOpen] = useState(false)  


  // Greeting after save
  const [greeting, setGreeting] = useState<string | null>(null)
  const greetTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null)
  const [deletingId, setDeletingId] = useState<string | null>(null)
  const [confirmOpen, setConfirmOpen] = useState(false)
  const [targetAsset, setTargetAsset] = useState<UIAsset | null>(null)

  const renameAsset = async (id: string, title: string) => {
    if (!uid) return
    const clean = title.trim()
    if (!clean) {
      toast({ title: 'Empty name', description: 'Provide a file name.', variant: 'destructive' })
      return
    }
    setRenamingId(id)
    const { error } = await supabase
      .from('user_assets')
      .update({ title: clean })
      .eq('id', id)
    setRenamingId(null)
    if (error) {
      toast({ title: 'Rename failed', description: error.message, variant: 'destructive' })
      return
    }
    // optimistic UI
    setAssets(prev => prev.map(a => (a.id === id ? { ...a, file_name: clean } : a)))
    setRenameId(null)
    setDraftTitle('')
  }

  const openDeleteConfirm = (a: UIAsset) => {
    setTargetAsset(a)
    setConfirmOpen(true)
  }

  const confirmDelete = async () => {
    if (!targetAsset) return
    setConfirmOpen(false)
    await deleteAsset(targetAsset)   
    setTargetAsset(null)
  }

  const showGreeting = (name: string) => {
    const greetings = [
      `Hey ${name}!`,
      `Welcome back, ${name}!`,
      `Nice to see you, ${name}!`,
      `Great to have you here, ${name}!`,
    ]
    const msg = greetings[Math.floor(Math.random() * greetings.length)]
    setGreeting(msg)
    if (greetTimeoutRef.current) clearTimeout(greetTimeoutRef.current)
    greetTimeoutRef.current = setTimeout(() => setGreeting(null), 4000)
    toast({ title: msg, description: "Your profile name has been updated." })
  }

  async function fetchSellerListings(userId: string, assetIds: string[]) {
    if (assetIds.length === 0) {
      setListingBySource({})
      return
    }
    const { data, error } = await supabase
      .from("mkt_listings")
      .select("id, source_id, seller_id, status, is_active, price_cents")
      .eq("seller_id", userId)
      .eq("source_type", "asset")
      .in("source_id", assetIds)
      .eq("status", "listed")
      .eq("is_active", true)
      .returns<ListingRow[]>()
    if (error) {
      console.error(error)
      setListingBySource({})
      return
    }
    const map: Record<string, ListingRow> = {}
    for (const row of data ?? []) map[row.source_id] = row
    setListingBySource(map)
  }

  useEffect(() => {
    let mounted = true
    setLoadingAuth(true)
    supabase.auth.getSession().then(({ data: { session } }) => {
      const id = session?.user?.id ?? null
      if (!mounted) return

      if (!id) {
        setUid(null)
        setAvatarUrl(null)
        setAssets([])
        setHasMore(false)
        setLoadingAssets(false)
        setLoadingAuth(false)
        setDisplayName("")
        setNameLoading(false)
      } else {
        setUid(id)

        // Load avatar + name + stripe in one go
        supabase
          .from("mkt_profiles")
          .select("avatar_url, display_name, stripe_verified, stripe_account_id")
          .eq("id", id)
          .single()
          .then(({ data: prof }) => {
            setAvatarUrl(prof?.avatar_url ?? session?.user?.user_metadata?.avatar_url ?? null)
            setDisplayName(prof?.display_name ?? "")
            setStripeVerified(!!prof?.stripe_verified)
            setStripeAccount(prof?.stripe_account_id ?? null)
            setNameLoading(false)
            setLoadingAuth(false)
          })

        fetchFirstPage(id)
      }
    })

    const { data: sub } = supabase.auth.onAuthStateChange((_event, s) => {
      const newId = s?.user?.id ?? null
      if (!newId) return
      setUid(newId)
      supabase
        .from("mkt_profiles")
        .select("avatar_url, display_name, stripe_verified, stripe_account_id")
        .eq("id", newId)
        .single()
        .then(({ data: prof }) => {
          setAvatarUrl(prof?.avatar_url ?? null)
          setDisplayName(prof?.display_name ?? "")
          setStripeVerified(!!prof?.stripe_verified)
          setStripeAccount(prof?.stripe_account_id ?? null)
          setNameLoading(false)
        })
      fetchFirstPage(newId)
    })

    return () => {
      if (sub?.subscription) sub.subscription.unsubscribe()
      if (greetTimeoutRef.current) clearTimeout(greetTimeoutRef.current)
    }
  }, [])

  async function fetchFirstPage(userId: string) {
    setLoadingAssets(true)
    setLoadError(null)
    const { data, error } = await supabase
      .from("user_assets")
      .select("id, owner_id, title, image_url, storage_path, mime_type, size_bytes, created_at")
      .eq("owner_id", userId)
      .order("created_at", { ascending: false })
      .range(0, PAGE_SIZE - 1)
      .returns<AssetRow[]>()
    if (error) {
      setLoadError(error.message)
      setAssets([])
      setHasMore(false)
    } else {
      const mapped = (data ?? []).map(toUI)
      setAssets(mapped)
      setOffset(mapped.length)
      setHasMore((data?.length ?? 0) === PAGE_SIZE)
      await fetchSellerListings(userId, mapped.map((a) => a.id))
    }
    setLoadingAssets(false)
  }

  const signInWithGoogle = async () => {
    const origin = window.location.origin
    await supabase.auth.signInWithOAuth({
      provider: "google",
      options: { redirectTo: `${origin}/auth/callback?next=${encodeURIComponent("/profile")}` },
    })
  }

  const loadMore = useCallback(async () => {
    if (!uid || loadingMore) return
    setLoadingMore(true)
    const from = offset, to = offset + PAGE_SIZE - 1
    const { data, error } = await supabase
      .from("user_assets")
      .select("id, owner_id, title, image_url, storage_path, mime_type, size_bytes, created_at")
      .eq("owner_id", uid)
      .order("created_at", { ascending: false })
      .range(from, to)
      .returns<AssetRow[]>()
    if (!error) {
      const mapped = (data ?? []).map(toUI)
      setAssets((prev) => {
        const next = [...prev, ...mapped]
        fetchSellerListings(uid, next.map((a) => a.id))
        return next
      })
      setOffset((prev) => prev + mapped.length)
      setHasMore(mapped.length === PAGE_SIZE)
    }
    setLoadingMore(false)
  }, [uid, offset, supabase, loadingMore])

  useEffect(() => {
    if (!uid) return
    const ch = supabase
      .channel("user-assets-feed")
      .on(
        "postgres_changes",
        { event: "INSERT", schema: "public", table: "user_assets", filter: `owner_id=eq.${uid}` },
        (payload) => {
          const ui = toUI(payload.new as AssetRow)
          setAssets((prev) => {
            const next = [ui, ...prev]
            fetchSellerListings(uid, next.map((a) => a.id))
            return next
          })
        }
      )
      .on(
        "postgres_changes",
        { event: "UPDATE", schema: "public", table: "user_assets", filter: `owner_id=eq.${uid}` },
        (payload) => {
          const ui = toUI(payload.new as AssetRow)
          setAssets((prev) => {
            const idx = prev.findIndex((a) => a.id === ui.id)
            const next = idx >= 0 ? [...prev.slice(0, idx), ui, ...prev.slice(idx + 1)] : [ui, ...prev]
            fetchSellerListings(uid, next.map((a) => a.id))
            return next
          })
        }
      )
      .subscribe()
    return () => {
      supabase.removeChannel(ch)
    }
  }, [supabase, uid])

  const owned = useOwnedCardify(FACTORY)
  const nftLoading = owned.loading
  const tokens = owned.tokens ?? []

  const openSell = (a: UIAsset) => {
    setSelectedAsset(a)
    setSellOpen(true)
  }

  const createListing = async () => {
    if (!uid || !selectedAsset) return
    if (!canSell) {
      toast({
        title: "Stripe account required",
        description: "Connect Stripe to list items for sale.",
        variant: "destructive",
      })
      return
    }
    setCreating(true)
    const { data, error } = await supabase
      .from("mkt_listings")
      .insert({
        title: selectedAsset.file_name,
        image_url: selectedAsset.public_url,
        price_cents: FIXED_PRICE_USD * 100,
        seller_id: uid,
        status: "listed",
        is_active: true,
        source_type: "asset",
        source_id: selectedAsset.id,
      })
      .select("id, source_id, seller_id, status, is_active, price_cents")
      .returns<ListingRow[]>()
    setCreating(false)
    if (error) {
      toast({ title: "Listing failed", description: error.message, variant: "destructive" })
      return
    }
    const row = data?.[0]
    if (row) setListingBySource((prev) => ({ ...prev, [row.source_id]: row }))
    toast({ title: "Listed for sale", description: `${selectedAsset.file_name} • $${FIXED_PRICE_USD}.00` })
    setSellOpen(false)
    setSelectedAsset(null)
  }

  const cancelListing = async (listing: ListingRow) => {
    if (!uid) return
    setCanceling(listing.id)
    const { error } = await supabase.from("mkt_listings").update({ status: "inactive", is_active: false }).eq("id", listing.id)
    setCanceling(null)
    if (error) {
      toast({ title: "Cancel failed", description: error.message, variant: "destructive" })
      return
    }
    setListingBySource((prev) => {
      const next = { ...prev }
      delete next[listing.source_id]
      return next
    })
    toast({ title: "Listing canceled" })
  }

  // Save Name (no autosave)
  const saveName = useCallback(
    async () => {
      if (!uid) return
      const name = (draftName || "").trim()
      if (!name) {
        toast({ title: "Invalid name", description: "Name cannot be empty.", variant: "destructive" })
        return
      }
      if (name.length > 60) {
        toast({ title: "Too long", description: "Max 60 characters.", variant: "destructive" })
        return
      }
      setNameSaving(true)
      const { error } = await supabase
        .from("mkt_profiles")
        .upsert({ id: uid, display_name: name }, { onConflict: "id" })
      setNameSaving(false)
      if (error) {
        toast({ title: "Name not saved", description: error.message, variant: "destructive" })
        return
      }
      setDisplayName(name)
      setIsEditingName(false)
      showGreeting(name)
    },
    [uid, draftName, supabase, toast]
  )

  const deleteAsset = async (a: UIAsset) => {
    if (!uid) return
    setDeletingId(a.id)
    try {
      const res = await fetch("/api/assets/delete", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id: a.id, table: "user_assets" }),
      })
      const json = await res.json()
      if (!res.ok || !json?.ok) {
        toast({ title: "Delete failed", description: json?.detail || json?.error || "Try again.", variant: "destructive" })
        setDeletingId(null)
        return
      }
      setAssets(prev => prev.filter(x => x.id !== a.id))
      setListingBySource(prev => {
        const next = { ...prev }
        delete next[a.id]
        return next
      })
      toast({ title: "Deleted", description: `${a.file_name} removed.` })
    } catch (error) {
      toast({ title: "Delete failed", description: "An error occurred while deleting.", variant: "destructive" })
    } finally {
      setDeletingId(null)
    }
  }

  // UI
  return (
    <div className="min-h-screen bg-cyber-black relative overflow-hidden font-mono">
    <div className="fixed inset-0 cyber-grid opacity-10 pointer-events-none" />
    <div className="fixed inset-0 scanlines opacity-20 pointer-events-none" />

    <div className="px-6 py-8 pt-24 relative max-w-7xl mx-auto">
      {/* Inline greeting banner */}
      {greeting && (
        <div className="mb-4 flex items-center gap-2 rounded-lg border border-cyber-cyan/40 bg-cyber-dark/60 px-4 py-3 text-cyber-cyan">
          <Sparkles className="h-4 w-4" />
          <span className="font-semibold">{greeting}</span>
        </div>
      )}

      {/* Avatar + Name */}
      <div className="mb-8 flex flex-col md:flex-row md:items-end md:justify-between gap-6">
        <div className="flex flex-col sm:flex-row items-start gap-5">
          {uid && (
            <AvatarUploader
              key={uid}
              uid={uid}
              initialUrl={avatarUrl}
              onUpdated={(url) => setAvatarUrl(url)}
              size={96}
            />
          )}

          <div className="space-y-2">
            <label className="block text-sm text-gray-400">Name</label>

            {!isEditingName ? (
              <div className="flex items-center gap-2">
                <div
                  className="min-h-[40px] min-w-[12rem] px-3 py-2 rounded border border-cyber-cyan/30 bg-cyber-dark/60 text-white"
                  title={displayName || 'Click the pencil to set your name'}
                >
                  {nameLoading ? 'Loading…' : displayName || 'Add your name'}
                </div>
                <Button
                  variant="ghost"
                  size="icon"
                  className="border border-cyber-cyan/30"
                  onClick={() => {
                    setDraftName(displayName || '')
                    setIsEditingName(true)
                  }}
                  disabled={!uid || nameLoading}
                  aria-label="Edit name"
                  title="Edit name"
                >
                  <Pencil className="h-4 w-4 text-white" />
                </Button>
              </div>
            ) : (
              <div className="flex items-center gap-3">
                <Input
                  value={draftName}
                  onChange={(e) => setDraftName(e.target.value)}
                  placeholder="Enter your name"
                  className="w-72 bg-cyber-dark/60 border border-cyber-cyan/30 text-white"
                  disabled={!uid}
                  autoFocus
                />
                <Button
                  onClick={saveName}
                  disabled={!uid || nameSaving}
                  className="cyber-button"
                  title="Save name"
                >
                  {nameSaving ? (
                    'Saving…'
                  ) : (
                    <span className="inline-flex items-center gap-1">
                      <Check className="h-4 w-4" />
                    </span>
                  )}
                </Button>
                <Button
                  variant="outline"
                  className="border-cyber-cyan/40 text-cyber-cyan"
                  onClick={() => {
                    setIsEditingName(false)
                    setDraftName('')
                  }}
                  title="Cancel"
                >
                  <X className="h-4 w-4 mr-1" />
                </Button>
              </div>
            )}

            <div className="text-xs text-gray-500">
              {!isEditingName ? 'Click to edit' : 'Save or cancel your changes'}
            </div>
          </div>
        </div>

        <div className="flex items-center gap-3">
          {!uid && !loadingAuth ? (
            <Button className="cyber-button" onClick={signInWithGoogle}>
              Sign in with Google
            </Button>
          )}
        </div>
      </div>

      {/* Header with Create Button */}
      <div className="mb-8">
        <div className="flex flex-col sm:flex-row sm:items-end sm:justify-between gap-4">
          <div className="flex-1">
            <h1 className="text-3xl md:text-4xl font-bold text-white tracking-wider">
              {displayName ? `My Cards – ${displayName}` : "My Cards"}
            </h1>
            <p className="text-gray-400 mt-1">Your uploaded designs and on-chain Cardify NFTs</p>
          </div>
          
          {/* Create button - left aligned on mobile, inline on desktop */}
          {uid && !loadingAuth && (
            <div className="w-auto sm:pb-1">
              <DropdownMenu onOpenChange={setIsCreateDropdownOpen} modal={false}>
                <DropdownMenuTrigger asChild>
                  <Button 
                    className="relative bg-cyber-black/60 border-2 text-cyber-green tracking-wider px-4 py-2 font-mono text-sm group animate-subtle-glow overflow-hidden"
                  >
                    <span className="relative z-10 pointer-events-none">CREATE NEW CARD</span>
                    <ChevronDown className={`w-4 h-4 ml-2 transition-transform duration-200 pointer-events-none relative z-10 ${isCreateDropdownOpen ? 'rotate-180' : ''}`} />
                    <div className="absolute inset-0 bg-gradient-to-r from-transparent via-cyber-cyan/20 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-700 pointer-events-none" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent 
                  align="end" 
                  className="bg-cyber-black/95 backdrop-blur-md border-2 border-cyber-cyan/50 text-white min-w-[200px] mt-2 rounded-none shadow-[0_2px_8px_rgba(34,211,238,0.2)]"
                  sideOffset={5}
                >
                  <DropdownMenuItem asChild className="focus:bg-cyber-green/20 focus:text-cyber-green cursor-pointer transition-colors duration-200">
                    <Link href="/generate" className="flex items-center gap-3 px-4 py-3 text-cyber-green hover:text-cyber-green font-mono text-sm">
                      <Sparkles className="w-4 h-4" />
                      <span>AI Generate</span>
                      <span className="ml-auto text-[10px] text-cyber-green/60">NEW</span>
                    </Link>
                  </DropdownMenuItem>
                  
                  <DropdownMenuItem asChild className="focus:bg-cyber-pink/20 focus:text-cyber-pink cursor-pointer transition-colors duration-200">
                    <Link href="/upload" className="flex items-center gap-3 px-4 py-3 text-cyber-pink hover:text-cyber-pink font-mono text-sm">
                      <Upload className="w-4 h-4" />
                      <span>Upload Art</span>
                    </Link>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          )}
        </div>
      </div>

      {/* Assets */}
      <section className="mb-14">
        <div className="flex items-end justify-between mb-4">
          <h2 className="text-2xl font-bold text-white tracking-wider">
            Uploads
          </h2>
          <div className="text-xs text-gray-400">
            {assets.length > 0 && (
              <span>
                {assets.length} file{assets.length > 1 ? 's' : ''} •{' '}
                {totalMb.toFixed(2)} MB total
              </span>
            )}
          </div>
        </div>

        {loadingAssets ? (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {Array.from({ length: 6 }).map((_, i) => (
              <Skeleton
                key={i}
                className="w-full h-64 rounded border border-cyber-cyan/20"
              />
            ))}
          </div>
        ) : !uid ? (
          <Card className="bg-cyber-dark/60 border border-cyber-cyan/30">
            <CardContent className="p-6 text-center text-gray-400">
              Sign in to view your uploads.
            </CardContent>
          </Card>
        ) : assets.length === 0 ? (
          <Card className="bg-cyber-dark/60 border border-cyber-cyan/30">
            <CardContent className="p-6 text-center text-gray-400">
              {loadError ? (
                <div className="text-cyber-orange">
                  Failed to load uploads: {loadError}
                </div>
              ) : (
                <>
                  No uploads found for this account.
                  <div className="text-xs text-gray-500 mt-2">
                    Active user id:{' '}
                    <span className="text-cyber-cyan">{uid ?? '—'}</span>
                  </div>
                  <Link
                    href="/upload"
                    className="ml-2 text-cyber-cyan hover:text-cyber-pink underline"
                  >
                    Upload artwork
                  </Link>
                </>
              )}
            </CardContent>
          </Card>
        ) : (
          <>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
              {assets.map((a, index) => {
                const existing = listingBySource[a.id]
                const listed =
                  !!existing && existing.is_active && existing.status === 'listed'
                const renaming = renameId === a.id

                return (
                  <Card
                    key={a.id}
                    className="bg-cyber-dark/60 border border-cyber-cyan/30 hover:border-cyber-cyan/60 transition-colors overflow-hidden"
                  >
                    <CardContent className="p-3">
                      {/* Card frame with trading card aspect ratio - clickable */}
                      <button 
                        onClick={() => {
                          setLightboxIndex(index)
                          setLightboxOpen(true)
                        }}
                        className="block relative aspect-[5/7] bg-gradient-to-br from-cyber-dark/40 to-cyber-dark/80 rounded-lg overflow-hidden cursor-pointer group w-full border-2 border-cyber-cyan/50 transition-all duration-300 hover:border-cyber-cyan"
                      >
                        <Image
                          src={a.public_url || PLACEHOLDER}
                          alt={a.file_name}
                          fill
                          sizes="(max-width: 640px) 50vw, (max-width: 1024px) 33vw, 20vw"
                          className="object-fill"
                          priority={index < 6}
                          onError={(e) => ((e.currentTarget as HTMLImageElement).src = PLACEHOLDER)}
                        />
                        
                        {/* Hover overlay with view text */}
                        <div className="absolute inset-0 pointer-events-none">
                          {/* Background gradient overlay */}
                          <div className="absolute inset-0 bg-gradient-to-t from-cyber-dark/95 via-cyber-dark/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                          
                          {/* View text in center on hover */}
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-cyber-cyan text-lg font-bold tracking-wider opacity-0 group-hover:opacity-100 transition-all duration-300 transform scale-90 group-hover:scale-100">VIEW</span>
                          </div>
                        </div>
                      </button>
                      
                      {/* Card info below */}
                      <div className="mt-3 space-y-2">
                        {/* Filename row with rename */}
                        <div className="flex items-center gap-1">
                          {!renaming ? (
                            <>
                              <h3 className="text-sm font-semibold text-white truncate flex-1" title={a.file_name}>
                                {a.file_name}
                              </h3>
                              <Button
                                variant="ghost"
                                size="icon"
                                title="Rename"
                                className="h-6 w-6 border border-cyber-cyan/30"
                                onClick={() => {
                                  setRenameId(a.id)
                                  setDraftTitle(a.file_name)
                                }}
                              >
                                <Pencil className="h-3 w-3 text-white" />
                              </Button>
                            </>
                          ) : (
                            <>
                              <Input
                                value={draftTitle}
                                onChange={(e) => setDraftTitle(e.target.value)}
                                className="flex-1 h-7 text-sm bg-cyber-dark/60 border border-cyber-cyan/30 text-white"
                                autoFocus
                              />
                              <Button
                                size="icon"
                                className="h-6 w-6 cyber-button"
                                onClick={() => renameAsset(a.id, draftTitle)}
                                disabled={renamingId === a.id}
                              >
                                {renamingId === a.id ? (
                                  <Loader2 className="h-3 w-3 animate-spin" />
                                ) : (
                                  <Check className="h-3 w-3" />
                                )}
                              </Button>
                              <Button
                                variant="ghost"
                                size="icon"
                                className="h-6 w-6 border border-cyber-cyan/30"
                                onClick={() => {
                                  setRenameId(null)
                                  setDraftTitle('')
                                }}
                              >
                                <X className="h-3 w-3 text-white" />
                              </Button>
                            </>
                          )}
                        </div>
                        
                        {/* File size and status */}
                        <div className="flex items-center justify-between text-xs text-gray-400">
                          <span>{(a.file_size ? a.file_size / (1024 * 1024) : 0).toFixed(1)} MB</span>
                          {listed && (
                            <Badge className="bg-green-500/15 border-0 text-green-400 text-xs px-2 py-0">
                              ${((existing!.price_cents ?? 0) / 100).toFixed(0)}
                            </Badge>
                          )}
                        </div>
                        
                        {/* Action buttons */}
                        <div className="flex gap-1 mt-2">
                          {listed ? (
                            <>
                              <Button
                                variant="destructive"
                                size="sm"
                                className="flex-1 h-7 text-xs"
                                onClick={() => cancelListing(existing!)}
                                disabled={canceling === existing!.id}
                              >
                                {canceling === existing!.id ? 'Canceling…' : 'Unlist'}
                              </Button>
                              <Button
                                variant="outline"
                                size="sm"
                                className="h-7 text-xs border-cyber-cyan/40 text-cyber-cyan hover:bg-cyber-cyan/10"
                                onClick={() => window.open(a.public_url, '_blank')}
                              >
                                Open
                              </Button>
                            </>
                          ) : (
                            <>
                              <Link href="/custom-checkout">
                                <Button
                                  size="sm"
                                  className="h-7 text-xs bg-cyber-pink/80 hover:bg-cyber-pink text-white border border-cyber-pink"
                                >
                                  Buy Physical
                                </Button>
                              </Link>
                              <Button
                                size="sm"
                                className="h-7 text-xs cyber-button"
                                onClick={() => openSell(a)}
                              >
                                Sell
                              </Button>
                              <Button
                                variant="ghost"
                                size="icon"
                                className="h-7 w-7 ml-auto border border-red-500/30 hover:bg-red-500/10"
                                title="Delete"
                                onClick={() => openDeleteConfirm(a)}
                                disabled={deletingId === a.id}
                                aria-label="Delete"
                              >
                                {deletingId === a.id ? (
                                  <Loader2 className="h-3 w-3 animate-spin" />
                                ) : (
                                  <Trash2 className="h-3 w-3 text-red-400" />
                                )}
                              </Button>
                            </>
                          )}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )
              })}
            </div>

            {hasMore && (
              <div className="flex justify-center mt-6">
                <Button
                  onClick={loadMore}
                  disabled={loadingMore}
                  className="cyber-button"
                >
                  {loadingMore ? 'Loading…' : 'Load more'}
                </Button>
              </div>
            )}
          </>
        )}
      </section>

      {/* On-chain NFTs */}
      <section>
        <div className="mb-4 flex items-center justify-between">
          <h2 className="text-2xl font-bold text-white tracking-wider">
            On-Chain Cardify NFTs
          </h2>
          <WalletButton />
        </div>

        {nftLoading ? (
          <Card className="bg-cyber-dark/60 border border-cyber-cyan/30">
            <CardContent className="p-6 text-gray-400">
              Scanning wallet…
            </CardContent>
          </Card>
        ) : tokens.length === 0 ? (
          <Card className="bg-cyber-dark/60 border border-cyber-cyan/30">
            <CardContent className="p-6 text-gray-400">
              Connect your wallet to see your Cardify NFTs.
            </CardContent>
          </Card>
        ) : (
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
            {tokens.map(([collection, id]) => (
              <NFTCard
                key={`${collection}-${id}`}
                collection={collection as `0x${string}`}
                id={id}
              />
            ))}
          </div>
        )}
      </section>
    </div>

    {/* Sell dialog – price locked to $9 */}
    <Dialog open={sellOpen} onOpenChange={setSellOpen}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>List for Sale</DialogTitle>
        </DialogHeader>
        <div className="space-y-4">
          <div className="text-sm text-gray-400 break-words">
            {selectedAsset?.file_name}
          </div>
          {!canSell && (
            <div className="mt-2 text-xs text-cyber-orange">
              Stripe not connected. Connect your account to list items.
            </div>
          )}
        </div>
        <DialogFooter className="pt-2">
          <Button variant="outline" onClick={() => setSellOpen(false)}>
            Close
          </Button>
          {canSell ? (
            <Button
              onClick={createListing}
              disabled={creating}
              className="cyber-button"
            >
              {creating ? 'Listing…' : 'List for $9'}
            </Button>
          ) : (
            <Button
              onClick={async () => {
                try {
                  setOnboarding(true)
                  const res = await fetch('/api/stripe/onboard', {
                    method: 'POST',
                  })
                  const json = await res.json()
                  if (!res.ok || (!json?.url && !json?.dashboardUrl)) {
                    toast({
                      title: 'Stripe onboarding failed',
                      description: json?.error || 'Try again.',
                      variant: 'destructive',
                    })
                    return
                  }
                  window.location.href = json.url ?? json.dashboardUrl
                } finally {
                  setOnboarding(false)
                }
              }}
              disabled={onboarding}
              className="cyber-button"
            >
              {onboarding ? 'Opening…' : 'Connect Stripe'}
            </Button>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>

    {/* Delete confirm dialog */}
    <Dialog open={confirmOpen} onOpenChange={setConfirmOpen}>
      <DialogContent className="border border-cyber-cyan/30 bg-cyber-dark/60">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <AlertTriangle className="h-5 w-5 text-cyber-orange" />
            Delete this card?
          </DialogTitle>
        </DialogHeader>
        <div className="space-y-3">
          <p className="text-sm text-gray-300">
            This will remove{' '}
            <span className="text-white font-semibold">
              {targetAsset?.file_name}
            </span>{' '}
            from your profile.
          </p>
          <div className="rounded-md border border-red-500/30 bg-red-500/10 p-3 text-xs text-red-300">
            This action cannot be undone.
          </div>
        </div>
        <DialogFooter className="pt-2">
          <Button
            variant="outline"
            onClick={() => setConfirmOpen(false)}
            className="border-cyber-cyan/40 text-cyber-cyan"
          >
            Cancel
          </Button>
          <Button
            onClick={confirmDelete}
            className="bg-red-600 hover:bg-red-700 text-white border border-red-500/50"
            disabled={!!(targetAsset && deletingId === targetAsset.id)}
          >
            {targetAsset && deletingId === targetAsset.id
              ? 'Deleting…'
              : 'Delete'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>

    {/* Lightbox Gallery */}
    <Lightbox
      images={assets.map(a => ({
        src: a.public_url || PLACEHOLDER,
        alt: a.file_name,
        caption: a.file_name
      }))}
      open={lightboxOpen}
      index={lightboxIndex}
      onClose={() => setLightboxOpen(false)}
      onNavigate={setLightboxIndex}
    />
  </div>
)

}
